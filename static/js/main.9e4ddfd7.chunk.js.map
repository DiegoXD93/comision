{"version":3,"sources":["components/Navbar/index.jsx","views/Cites.jsx","App.js","serviceWorker.js","index.js"],"names":["index","AppBar","position","color","Container","Toolbar","IconButton","edge","aria-label","Typography","variant","CiteRow","date","cite","requested","signed","addressed","reference","TableRow","TableCell","Cites","useState","page","setPage","rowsPerPage","setRowsPerPage","data","Grid","TableContainer","component","Paper","Table","TableHead","map","el","key","TableBody","slice","row","TableFooter","TablePagination","rowsPerPageOptions","count","length","onChangePage","event","newPage","onChangeRowsPerPage","parseInt","target","value","App","className","Navbar","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9e4ddfd7.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  IconButton,\n  Container,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nconst index = () => {\n  return (\n    <AppBar position=\"sticky\" color=\"primary\">\n      <Container>\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\">Comision</Typography>\n        </Toolbar>\n      </Container>\n    </AppBar>\n  );\n};\n\nexport default index;\n","import React, { useState } from \"react\";\nimport {\n  Paper,\n  TableContainer,\n  Table,\n  TableHead,\n  TableBody,\n  TableFooter,\n  TableRow,\n  TableCell,\n  TablePagination,\n  Grid,\n  Container,\n} from \"@material-ui/core\";\n// import CitesTable from \"../components/CitesTable\";\n\nconst CiteRow = ({ date, cite, requested, signed, addressed, reference }) => {\n  return (\n    <TableRow>\n      <TableCell>{date}</TableCell>\n      <TableCell>{cite}</TableCell>\n      <TableCell>{requested}</TableCell>\n      <TableCell>{signed}</TableCell>\n      <TableCell>{addressed}</TableCell>\n      <TableCell>{reference}</TableCell>\n    </TableRow>\n  );\n};\n\nconst Cites = () => {\n  const [page, setPage] = useState(1);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n  let head = [\n    \"Fecha\",\n    \"Cite\",\n    \"Solicitado por\",\n    \"Firmado Por\",\n    \"Dirigido a\",\n    \"Referencia\",\n  ];\n  let data = [\n    {\n      date: \"20-05-2020\",\n      cite: \"403\",\n      requested: \"Un wey\",\n      signed: \"Otro wey\",\n      addressed: \"Tu papa\",\n      reference: \"Porque no me deja completar el lorem ipsum\",\n    },\n    {\n      date: \"20-05-2020\",\n      cite: \"404\",\n      requested: \"Un wey\",\n      signed: \"Otro wey\",\n      addressed: \"Tu papa\",\n      reference: \"Porque no me deja completar el lorem ipsum\",\n    },\n    {\n      date: \"20-05-2020\",\n      cite: \"405\",\n      requested: \"Un wey\",\n      signed: \"El wey\",\n      addressed: \"Su papa\",\n      reference:\n        \"Porque no me deja completar el lorem ipsum Porque no me deja completar el lorem ipsum\",\n    },\n    {\n      date: \"20-05-2020\",\n      cite: \"403\",\n      requested: \"Un wey\",\n      signed: \"Otro wey\",\n      addressed: \"Tu papa\",\n      reference: \"Porque no me deja completar el lorem ipsum\",\n    },\n    {\n      date: \"20-05-2020\",\n      cite: \"404\",\n      requested: \"Un wey\",\n      signed: \"Otro wey\",\n      addressed: \"Tu papa\",\n      reference: \"Porque no me deja completar el lorem ipsum\",\n    },\n    {\n      date: \"20-05-2020\",\n      cite: \"405\",\n      requested: \"Un wey\",\n      signed: \"El wey\",\n      addressed: \"Su papa\",\n      reference:\n        \"Porque no me deja completar el lorem ipsum Porque no me deja completar el lorem ipsum\",\n    },\n  ];\n  function rows(filter) {\n    return data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);\n  }\n\n  return (\n    <Container>\n      <Grid>\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                {head.map((el, index) => (\n                  <TableCell key={index}>{el}</TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows().map((row, index) => (\n                <CiteRow {...row} key={index} />\n              ))}\n            </TableBody>\n            <TableFooter>\n              <TableRow>\n                <TablePagination\n                  rowsPerPageOptions={[5, 10, 25]}\n                  count={data.length}\n                  rowsPerPage={rowsPerPage}\n                  page={page}\n                  onChangePage={handleChangePage}\n                  onChangeRowsPerPage={handleChangeRowsPerPage}\n                ></TablePagination>\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </TableContainer>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Cites;\n","import React from \"react\";\nimport { Container } from \"@material-ui/core\";\nimport Navbar from \"./components/Navbar\";\nimport Cites from \"./views/Cites\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Container>\n        <Cites />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}